{
  "Uuid": "e0e46b85-4b5b-44e4-8d15-d29e87256a2a",
  "IsCustomNode": true,
  "Category": "Crumple.IronPython.Actions",
  "Description": "Given a list of datetimes, attempts to return the direction of the sun in the model as both a vector and XYZ object (taking true north into account).",
  "Name": "üêç DateTime.SunDirection",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Made by Gavin Crump\r\n# Free for use\r\n# BIM Guru, www.bimguru.com.au\r\n\r\n# Boilerplate text\r\nimport clr\r\nimport math\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nimport Autodesk \r\nfrom Autodesk.Revit.DB import XYZ, SunAndShadowType, Transform,\\\r\nLine, ParameterUtils,BasePoint, BuiltInParameter, View3D\r\n\r\n# Current document\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Get revit version\r\nuiapp = DocumentManager.Instance.CurrentUIApplication \r\napp = uiapp.Application \r\nuidoc = uiapp.ActiveUIDocument\r\nREVIT_VER = app.VersionNumber\r\n\r\n# Define list/unwrap list functions\r\ndef tolist(input):\r\n    result = input if isinstance(input, list) else [input]\r\n    return result\r\n\r\ndef objOrList(input, initial = IN[0]):\r\n\tif isinstance(initial, list):\r\n\t\treturn input\r\n\telse:\r\n\t\treturn input[0]\r\n\r\n# Preparing input from dynamo to revit\r\ndateTimes   = tolist(IN[0])\r\nviewType_id = UnwrapElement(IN[1]).Id\r\n\r\n# Constants for geometry\r\nAXIS_Y = XYZ.BasisY\r\nAXIS_X = XYZ.BasisX\r\nAXIS_Z = XYZ.BasisZ\r\nORIGIN = XYZ(0,0,0)\r\n\r\n# Function to get sun vector from view\r\ndef get_Sun_Direction(view, dateTime, myDoc = doc, myUidoc = uidoc):\r\n\t# View sun shadow settings\r\n\tsunSettings = view.SunAndShadowSettings\r\n\t# Adjust shadow settings\r\n\tsunSettings.SunAndShadowType = SunAndShadowType.StillImage\r\n\tsunSettings.StartDateAndTime = dt\r\n\t# Refresh the view, regen the doc\r\n\tmyUidoc.RefreshActiveView()\r\n\tmyDoc.Regenerate()\r\n\t# Compute altitude\r\n\taltitude = sunSettings.Altitude\r\n\taltitude = sunSettings.GetFrameAltitude(sunSettings.ActiveFrame)\r\n\taltitudeRotation  = Transform.CreateRotation(AXIS_X, altitude)\r\n\taltitudeDirection = altitudeRotation.OfVector(AXIS_Y)\r\n\t# Compute azimuth\r\n\tazimuth = sunSettings.Azimuth\r\n\tazimuth = sunSettings.GetFrameAzimuth(sunSettings.ActiveFrame)\r\n\tactualAzimuth = 2 * math.pi - azimuth\r\n\tazimuthRotation = Transform.CreateRotation(AXIS_Z, actualAzimuth)\r\n\t# Get sun direction\r\n\tsunDirection = azimuthRotation.OfVector(altitudeDirection)\r\n\t# Return the vector\r\n\treturn sunDirection\r\n\r\n# Function to rotate vector by angle\r\ndef vector_rotateAndDerive(vec, angle):\r\n\t# Make a base curve\r\n\ttempLine = Line.CreateBound(ORIGIN, vec)\r\n\t# To radians\r\n\trad = math.radians(angle)\r\n\t# Make transform\r\n\trot = Transform.CreateRotation(AXIS_Z, rad)\r\n\t# Get the up and forward directions\r\n\ttranLine = tempLine.CreateTransformed(rot)\r\n\t# Return the transformed vector\r\n\treturn tranLine.Direction\r\n\r\n# Function: Get builtin parameter by enum or spec Id\r\ndef getBip(element, bip):\r\n    # RVT < 2022\r\n    if REVIT_VER < 2022:\r\n        return element.get_Parameter(bip)\r\n    # RVT >= 2022\r\n    else:\r\n        id_forgeType = ParameterUtils.GetParameterTypeId(bip)\r\n        return element.GetParameter(id_forgeType)\r\n\r\n# Get project rotation\r\npbp = BasePoint.GetProjectBasePoint(doc)\r\nbip = BuiltInParameter.BASEPOINT_ANGLETON_PARAM\r\nsafe_bip = getBip(pbp, bip)\r\npbp_an = safe_bip.AsDouble() * (180/math.pi)\r\n\r\n# For each date time, make a view orientation\r\norientations = []\r\n\r\n# Start a transaction (in the group)\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\ntempView = View3D.CreateIsometric(doc, viewType_id)\r\n\r\nfor dt in dateTimes:\r\n\t# Get sun direction and convert to view facing\r\n\tvec_sun = get_Sun_Direction(tempView, dt, doc, uidoc)\r\n\tvec_neg = vec_sun.Negate()\r\n\tvec_rot = vector_rotateAndDerive(vec_neg, pbp_an)\r\n\t# Store rotation\r\n\torientations.append(vec_rot)\r\n\r\n# Delete the temporary view\r\ndoc.Delete(tempView.Id)\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\nOUT = objOrList([o.ToVector() for o in orientations])",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "ed363fe6a7d640b4bc037f70afe6208e",
      "Inputs": [
        {
          "Id": "1b22b6c5bd284da2bf5a2d45394f84ad",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4e8d1458d6b246ce922e8c632ccad50f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d0a05073aabe436d83f9da0a4baee5e4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "dateTimes",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "1a25baecb16a4739b774e6704072bfc1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f09eea3258e24598b54c0a1888f805aa",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "vectors",
      "Id": "170b3698855d4a17bfccaa7c3bae5deb",
      "Inputs": [
        {
          "Id": "461c5c393d4c43e8a9b04021215dd1ab",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "b5a545ef-d4f8-4425-b3df-251d97d392b2",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "8b509d5bfef3401fa76d42618cba4f36",
      "Inputs": [
        {
          "Id": "6ae1594da051409d8ef59b0f9b405dd8",
          "Name": "name",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f59bf08401f94656a9fab2014bf20300",
          "Name": "viewFamilyType",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "682a50097b0a40f487a2d40a39b2fb04",
          "Name": "foundMatch",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Tries to return an 3D view type with the given name, if one exists in the model."
    }
  ],
  "Connectors": [
    {
      "Start": "d0a05073aabe436d83f9da0a4baee5e4",
      "End": "461c5c393d4c43e8a9b04021215dd1ab",
      "Id": "5f9902afa86640cc91f64eb48720982e"
    },
    {
      "Start": "f09eea3258e24598b54c0a1888f805aa",
      "End": "1b22b6c5bd284da2bf5a2d45394f84ad",
      "Id": "015c1f2d90934003833be5449769088d"
    },
    {
      "Start": "f59bf08401f94656a9fab2014bf20300",
      "End": "4e8d1458d6b246ce922e8c632ccad50f",
      "Id": "97e2468a95e14e0abe1c98c80d29bd8d"
    }
  ],
  "Dependencies": [
    "b5a545ef-d4f8-4425-b3df-251d97d392b2"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "Crumple",
      "Version": "2022.5.27",
      "ReferenceType": "Package",
      "Nodes": [
        "8b509d5bfef3401fa76d42618cba4f36"
      ]
    }
  ],
  "Author": "None provided",
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.12.1.8246",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "ed363fe6a7d640b4bc037f70afe6208e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 250.0,
        "Y": 0.0
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "1a25baecb16a4739b774e6704072bfc1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -49.423976447537655,
        "Y": -19.834692091742
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "170b3698855d4a17bfccaa7c3bae5deb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 460.52987954011724,
        "Y": 0.0
      },
      {
        "ShowGeometry": true,
        "Name": "¬© ViewTypes.GetByName3D",
        "Id": "8b509d5bfef3401fa76d42618cba4f36",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -81.120993506389311,
        "Y": 62.514548313144928
      }
    ],
    "Annotations": [],
    "X": 24.569990204661508,
    "Y": 279.05112229524718,
    "Zoom": 0.86797750764901571
  }
}