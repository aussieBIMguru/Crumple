{"license":"MIT","file_hash":null,"name":"Crumple","version":"2026.8.1","description":"Nodes built by Gavin Crump (Aussie/BIM Guru) for Revit 2023-2026. The contents of the package is quite general, but most nodes are developed to support everyday model management and delivery automation needs for architects using Revit.\r\n\r\nMost nodes utilize CPython3 which comes with Dynamo, and no IronPython dependencies exist in the package.\r\n\r\nEnjoy!","group":"","keywords":["bim","model","manager","aussie","gavin","audit","family","families","guru","revit"],"dependencies":[],"host_dependencies":["Revit","IronPython2","CPython3"],"contents":"© About.AussieBIMGuru - Opens the Aussie BIM Guru YouTube channel., © About.BIMGuruEducation - Takes you to my course and content platform, courses.bimguru.education., © About.©rumple - About the package., © Area.Create - Given a view and a list of points, will create new areas at them. Note that you will need to provide a single view and list of points, or apply @levels to your inputs to have them work., © Area.CreateByRooms - Given a list of rooms, the node will create areas in the same position for an area plan view. The areas will have their name and number set to match their respective room., © Area.CreateSeparators - Given a list of Dynamo curves, the node generates area boundary lines along them in the given view. For convenience of iterability, this node flattens the curve list by default., © Audit.ElevationMarkers - Returns all elevation markers with no active elevations in them. If you set the purge to true, it will attempt to delete them also., © Audit.ImportedPatterns - Returns all fill and line patterns with 'import' in their name (case insensitive). If you set the purge to true, it will attempt to delete them also., © Audit.ScheduleTypes - Returns all fill and line patterns with 'import' in their name (case insensitive). If you set the purge to true, it will attempt to delete them also., © Audit.ViewFilters - Returns all view filters in the document which are not in use by views or view templates. If you set the purge to true, it will attempt to delete them also., © Audit.Views - Returns all views in the document which are not placed on sheets or dependent upon views placed on sheets (callout, dependent views). If you set the purge to true, it will attempt to delete them also., © Audit.ViewTemplates - Returns all view templates in the document which are not in use by views or view types. If you set the purge to true, it will attempt to delete them also., © BoundingBox.Frame - Given a bounding box, returns the frame curves around it., © BoundingBox.Properties - Returns the width, depth, height and centroid of provided bounding boxes., © BoundingBox.Union - Given a list of bounding boxes, form the overall bounding box of those boxes., © Ceiling.Create - A new method unique to Revit 2022 that enables ceilings via the sketch API to support internal loops. Will not work in previous versions, and works best when the curves are in the form of list of lists of curves in continuous order., © Clipboard.Receive - Attempts to retrieve the current data on the clipboard., © Clipboard.Send - Attempts to send data to the clipboard., © Collect.BaseExportOptions - Collect the DWG/DXF/DGN options from the provided document if any, returning their name., © Collect.BIPGs - Returns all BuiltIn Parameter Groups by group and type., © Collect.CADImports - Returns all CAD import instances as well as their type and view., © Collect.CADLinks - Return all CAD linked instances as well as their types and owner views., © Collect.DesignOptions - Returns all design options in a document., © Collect.DesignOptionsBySet - Returns all design options broken down by primary and secondary, as well as their related option set., © Collect.DimensionTypes - Returns all dimension and spot dimension types (aka styles) in a document., © Collect.Families - Returns all families in the document. Families are sorted into user created, inplace and internal., © Collect.FillPatterns - Returns all fill patterns in a document., © Collect.GroupTypeIds - Returns all group type Id objects and their names., © Collect.Images - Returns all image instances in a document as well as their names, types and owner views., © Collect.Keynotes - Returns all keynotes connected to the document, including their descriptions and first parent keynote. You can choose to exclude any parent keynotes from the outputs., © Collect.LegendTypes - Returns all legend types in a document., © Collect.LinePatterns - Returns all line patterns in a document., © Collect.Lines - Returns all lines in a document, with the option to exclude or include detail/model lines in the output. By default will return all of them., © Collect.LineStyles - Returns all the line styles in a document as well as their graphic styles, names, ids and whether a user made them., © Collect.Materials - Returns all materials in the given document., © Collect.Phases - Returns all phases in a document., © Collect.PlaceholderSheets - Returns all placeholder sheets in a document., © Collect.PrintSettings - Returns all print settings in the provided document and their names., © Collect.Regions - Returns all filled and/or masking regions in a document., © Collect.Revisions - Returns all revisions in a document., © Collect.RevitLinks - Returns all Revit link types in the current document, as well as all instance elements of those types., © Collect.Rooms - Collects all valid/invalid rooms as two lists. Invalid rooms are not placed, or have issues that make their area invalid (not enclosed, redundant etc.)., © Collect.ScheduleInstances - Returns all schedule sheet instances as well as their types. Optional exclusions for each schedule type (schedule, key, revision)., © Collect.SchedulesByType - Returns all schedules in a document, separated into key and non-key schedules., © Collect.ScheduleTypes - Returns all standard schedule types in a document, excluding key and revision schedules., © Collect.Sheets - Returns all the sheets in a document, with the option to omit any placeholder sheets., © Collect.SpaceSchedules - Gets all occupancy, power and lighting schedules currently applied to any Space Types in a document. Also returns their name and Id., © Collect.SpaceTypes - Collects all space types as well as their names from a document., © Collect.SpecTypeIds - Returns all spec type Id objects and their names., © Collect.ViewFamilies - Returns all view family objects and names., © Collect.Viewports - Returns all viewports in the current document., © Collect.ViewportTypes - Returns all viewport types and their names in the provided document., © Collect.Views - Returns all views in a document. Excludes system views, templates, legends and schedule instances., © Collect.ViewSheetSets - Returns all view sheet sets in the target document., © Collect.ViewTemplates - Returns all view templates in a document. Due to API/Dynamo limitations, 3D view templates are excluded from the list., © Collect.Warnings - Returns all warnings in the Revit model in their Revit db format., © Collect.Worksets - Returns all user worksets and their names in a document., © Colour.Desaturate - Converts RGB colours to their average aggregate brightness (R+G+B / 3) and retains their alpha value., © Colour.OverrideAlpha - Overrides the alpha value (transparency) of all colours fed into the node. The transparency value should be between 0 and 255., © Coordinates.GetLinkTransform - Given a Revit link instance, returns the coordinate system for transformation of location., © Coordinates.Origin - This node will return the Revit project origin as well as the NS, EW and elevation values., © Coordinates.PBP - This node will return the Revit project base point as well as the NS, EW and elevation values., © Coordinates.SP - This node will return the Revit survey point as well as the NS, EW and elevation values., © Curve.FilterByHeight - Given a list of curves, filters them by the Z value of their mid point., © Curve.FilterByZ - Given a curve or list of curves, filter from the list only those of a specific Z factor in their midpoint direction., © DateTime.AnalysisPeriod - Constructs a series of DateTime objects from a year, month, day, start time, end time and time step., © DateTime.Formatted - A typical date time format for the current time, as well as date prefix and time suffix fields. These are typically useful for appending to file names generated via Dynamo., © DesignOption.OptionSet - For a given design option, return its related set., © Directory.Contents - Be aware there is an OOTB node that can do this, but I wanted to add this to the package so others can see how to use a Python method as a starter block in other scripts., © Directory.Create - Creates a directory from a path if it does not exist., © Directory.Open - Attempts to open a directory path., © Door.ToFromRoom - Given a door, attempts to return its to and from room properties as well as how many rooms it relates to., © Dynamo.CurrentScript - Returns the name of the currently active Dynamo script, with an optional extension., © Dynamo.UserPaths - Returns the Dynamo folder and log folder paths., © Element.ById - Given an Element Id as an integer, returns the corresponding element in Revit., © Element.ByUniqueID - Given a Unique Id as a string, returns the corresponding element in Revit., © Element.Centroid - Returns the centroid of the element's axis-aligned bounding box., © Element.Delete - Given a list of elements, attempt to delete them and then return true or false depending on whether it could be deleted. This script flattens the list structure before attempting., © Element.Editable - Given an element or list of elements, returns whether they are editable., © Element.GetLevelBelow - For a list of points, returns the first provided level below that point., © Element.GetParameterValueByName - Returns the value of a parameter if found by instance or type., © Element.GetType - Gets the element type of the provided element, if able., © Element.Group - Returns if an element belongs to a group, and the group itself if it has one., © Element.HandFlipped - Returns true if an element has been hand flipped. If the element has been face flipped also, it will return false (as the element is technically not hand flipped in this case)., © Element.Owners - Returns the creator, owner and last editor of an element in a workshared model if possible., © Element.Painted - For an element or list of elements returns if that element is painted and the painted surface count., © Element.Populate - Distributes points randomly amongst the bounding box of an element., © Element.Rename - For an element or list of elements, attempt to set the value of a given parameter (by default Name)., © Elements.ByLinkAndCategory - Returns all elements of any number of categories in a single Revit Model link instance., © Elements.Cluster - Given a list of elements, determine how they should be grouped based on a proximity radius. The node will collect the centroid of each element (ignoring the Z coordinate) and cluster them based on whether their radii intersect with one another., © Element.ScopeBox - Given an element, will check if a scope box is assigned to it and return it if so., © Element.SetWorkset - Given a workset and a list of elements, attempt to set those elements' worksets to it., © Elements.IsolateInView - Given a list of elements and a view (optional), will temporarily isolate them. If no view is provided, the active view will be used., © Elements.Quarantine - Given a list of element lists, exclude elements that wont comply with a given separation from one another. The node will return (one of) the most best possible outcomes for that group of elements., © Elements.Select - Given a list of elements, select them in the Revit document., © Element.Status - Returns the checkout and model update status of elements if the model is workshared., © Elements.UnionBox - Given a list of elements, return the overall bounding box of all those that have a valid bounding box to return., © Element.TaggedInView - Returns if an element is tagged in the given view., © Element.TagInView - Given a set of controls, tags elements in a view. All inputs will lace longest based on the element input count., © Element.View - Returns the owner view of an element, if any. Typically only works for view specific elements., © Element.Workset - Given a list of elements, return their associated workset, its name and a unique list of workset names belonging to that list of elements., © Excel.Read 🐼 - Given a excel file path, will attempt to read its contents using the pandas library. If your pandas is not valid or found, nothing will be returned., © Excel.SheetNames 🐼 - Returns the sheet names in an excel filepath. If pandas is not found or functioning, returns an error., © Excel.Write 🐼 - Given a file path, sheet(s) and data matrice(s) attempts to write them to those worksheets. If a file does not exist at the path one will be created. If pandas is not found or valid, an error will be returned., © Family.CategoryName - Returns the category name a family is associated with., © FamilyDoc.AddSharedParameters - Given a family document or list of them, attempts to create shared parameters in them. Input structures should be in the form of one sub-list per family document, in a list (but the node will try to create this data structure if not, as well as repeat the last list if they are shorter than the family document list)., © FamilyDoc.Close - Given documents in the unwrapped state, attempts to close then with the option to save them (applies to all documents, one input expected, not a list)., © FamilyDoc.CloseAndSave - Attempts to close a family document or list of family documents, and save the families in the process to their current location., © FamilyDoc.CloseWithoutSave - Attempts to close a family document or list of family documents, without saving them., © FamilyDoc.GetParameters - Given a family document or list of them, returns all parameters and their properties in those documents. You can provide optionally provide parameter names to get just those parameters., © FamilyDoc.GetParameterValues - Given a family document of list of them, attempts to get all parameter values of the provided types or type names., © FamilyDoc.GetTypes - Given a family document or list of documents, returns all types in that document and their names. You can provide optionally provide type names to get just those types., © FamilyDoc.Open - Given a file path to a family, attempts to open that document in the background in Revit if possible. Should not be used for regular models/templates., © FamilyDoc.RemoveParameters - Given a family document or list of them, attempts to remove parameters in them. Input structures should be in the form of one sub-list per family document, in a list (but the node will try to create this data structure if not, as well as repeat the last list if they are shorter than the family document list)., © FamilyDoc.ReplaceWithSharedParameters - Given a family document or list of documents, as well as family parameters and shared parameter definitions, this node will attempt to replace the parameters., © FamilyDoc.ReportToValues - Given an input from the typical valuesreport structure, attempts to prepare this data into its equivalent data structure for a SetValues node. Missing values will become nulls and Blank values will become empty strings., © FamilyDoc.SetFormulae - Given a list of family documents, parmeters, and formula lists the node will attempt to set the parameter formulae., © FamilyDoc.SetParameterValues - Given a list of family documents, parmeters, types and value lists by type the node will attempt to set the parameter values. ElementId based values should be provided in the form of elements (not Ids) respective to the family document. For best results, combine this with the ReportToValues node., © FamilyDoc.Title - Returns the title of a family document in the unwrapped state. Can be used in conjunction with nodes like 'FamilyDocOpen'., © FamilyDoc.ValuesReport - Given the outputs of the family types and parmaeter values nodes, puts together an Excel valid data structure. Elements will be converted to Name/Id syntax., © Family.EditDocument - Attempts to edit (open) a copy of a family in the project as a background document., © Family.FirstInstance - Returns the first instance of a family in the model. Handy for when you know you'll be targetting an early placed object like a homescreen., © FamilyInstance.ByViewAndPoint - Given a family type, list of views and list of points, attempts to create family instances at those points in those views., © FamilyInstance.GetRotation - Returns the rotation of both point and line based elements. Not as thorough as other nodes out there, but a bit faster and robust when you know your elements are likely family instances., © FamilyInstance.SuperComponent - Returns the family that this family instance belongs to , if any., © Family.IsInPlace - Given a family, returns if that family is modelled in place. Noting this is for the family of an instance, not the instance itself., © FamilyParam.Formulae - For a family parameter of list of them, returns their formula if any., © FamilyParam.IsInstance - For a family parameter or list of them, return if the parameters are instance based., © FamilyParam.IsShared - For a family parameter or list of them, return if the parameters are shared., © FamilyParam.Name - Given a family parameter of list of them, return the parameter names. Use @L2 levels for list of list processing., © FamilyParam.ParameterGroup - For a family parameter of list of them, returns their parmater groups. If using Revit 2022+ the node will return ForgeTypeIds instead., © FamilyParam.StorageType - For a family parameter or list of them, return their storage types., © Family.SaveAs - Saves families in the current document to the given file paths., © FamilyType.Name - For a family type or list of family types, returns the type names., © File.FilterBackups - Given a filepath or list of filepaths, separate out any backup file paths., © File.Open - Attempts to open a file in Windows., © File.ReadDelimited - Attempts to read a CSV file path., © File.Rename - Attempts to rename a file using its before and after file paths., © File.ReplaceName - Given a file path, substitutes the file name of that path with a given name (keeping the extension regardless)., © File.Size - Returns the size of a file path in MB., © File.WriteDelimited - Given a matrix of strings, attempts to write them to a csv file (or make a new one if it doesn't exist., © Floor.Create - A new method unique to Revit 2022 that enables floors via the sketch API to support internal loops. Will not work in previous versions, and works best when the curves are in the form of list of lists of curves in continuous order., © Flow.Flipper - If a true value is provided, return the inputs on opposite branches in the output. Otherwise returns them in the same order., © Flow.Gate - Unless a true value is provided, sends across an empty list instead of an input stream., © Flow.IfThenElse - A simple if/then/else logic gate. If true, you get the 'then' input, otherwise you get the 'else' input. Unlike the OOTB 'If' node, this one allows differing list sizes., © Flow.Relay - Passes data forward., © Flow.WaitFor - Tells the first input to wait for the second input to arrive, then passes on the first input. Really useful for scripts which have branching paths that rely on their outputs to carry each other forward.\r\n\r\nQuite a few custom packages have a 'passthrough' or 'waitfor' node. I use these all the time, so find it useful to have them contained in this package also., © Group.Elements - Given a Revit group, return all elements in that given group if any., © Group.HasExclusions - Returns a boolean as to whether a group contains excluded elements., © Level.Create - Given elevations and names, create levels with those properties., © Level.GetByName - Given a list of names, returns the matching levels (if they exist)., © List.Combinate - Given a list and a length, will find all combinations of that list included repetion of the elements. Takes order into consideration as well., © List.CullMany - Filters up to three lists in parallel. Handy for reducing space that multiple boolean masks occupy otherwise., © List.Force - A basic node to check if the input is in the form of a list, and if not it forces it to become one. This simple python script is useful for incorporation into larger scripts for iterating., © List.GraftByPrimary - Given a first input, the node will assess how many items it contains (if one, it will make it a list of 1 item). Remaining branches will be forced into a list of lists, where the last branch will be repeated to a longest length as the first list (if one list or item is provided, it will repeat as the list of lists)., © List.KickFlip - Drops a certain number of rows from the front a list, then transposes it. Handy for pre-processing Excel data!, © List.Objectify - Given a list object, if the list is only one object in depth it will return that object instead., © List.Positize - From a list of numbers, replace all negative values with a substitute value. Useful for processing those pesky -1 indices!, © List.RecursiveSquared - This node is just here as an example of how one can use recursion in Python. Crumple generally works with assumed list shapes/structures, but that doesn't mean you have to!\r\n\r\nThis node is just here as....\r\n\r\n(sorry, typical obligatory recursion joke)., © List.ReplaceNulls - Replaces all nulls with a given substitute., © List.SplitAtIndex - Splits a list at a specific index, then returns the two lists. You may need to use levels in order for this to work properly., © List.SplitAtValue - Given a list (or list of lists), split the lists into sublists wherever a specified value occurs. Typically used for processing lists of booleans or 1's and 0's in Ladybug sun hour results to isolate continuous periods., © List.TryToGetItemAtIndex - Attempts to get an item at an index of a list, and replaces it with a specified object if it is not found., © Log.Write - Writes the date, user name, script name and active model's name to a csv file. It will write to a specified directory, or the user's documents folder if a valid one is not provided. Will write new rows to the same file if one is found., © Math.Bounds - Given a range of values, return the minimum, maximum and size of its domain., © Math.ClosestNumber - For each number, find the nearest number in another list. Values are able to be forced down., © Math.CumulativeSum - Continuously adds a list of numbers together, returning a list of the values in sequence., © Math.Denominate - Given a list of numbers and a denominator, return the remainder of the numbers when divided by it. If the number is less than the demoninator, it will return the same number. This can be useful for identifying parallel vectors facing different directions by their angle about axis., © Math.Fibonnaci - Returns the input number of Fibonnaci numbers., © Math.IntegerToOrdinal - Given an integer or list of integers, convert it to its ordinal form. The node works with an inherent limit of 99, but may be expanded in future if a computationally efficient method is identified., © Math.Ordinals - Returns a list containing 1 through to 99 in ordinal format., © Math.RandomNumbers - Generates a list of random numbers between a minimum and maximum value., © Modifier.FilterSolids - From a list or lists of geometry, filter out anything that doesn't fall under the object type solid. This is useful for dealing with families that contain geometry like curves from model lines., © Parameter.BIPGbyName - Given a string or list of strings, return the corresponding BuiltIn Parameter Group., © Parameter.GroupTypeIdByName - Given a name or list of names of group type ids, returns them if found., © Parameter.ProjectInformation - Retrieve project information field(s) by name., © Parameter.SpecTypeIdByName - Given a name or list of names of spec type Ids, returns them if found., © Point.Deconstruct - Breaks a point into its respective X, Y and Z components., © Polycurve.GreatestArea - From a list of polycurves, return the one with the largest area only. Can be useful for determining the outer-most boundary in a room with internalised holes., © Polycurve.Swissify - Takes a collection of polycurves, finds the encapsulating curve and returns the outermost surface (with holes cut out). The result must be projected to a common plane., © Region.EdgeStyles - Returns the graphic styles of the edges of a filled or masking region., © Revit.AreaToInternal - Convert values from the project unit type to internal Revit unit type (square feet)., © Revit.AreaToProject - Convert values from the internal unit type (square feet) to the Revit unit type., © Revit.CurrentView - Given the current document, return the active view., © Revit.CurrentViews - Returns all views in the currently opened or specified document., © Revit.ExportOptionsDwg - Creates a DWG export options object, or retrieves one with the given name if found in the document., © Revit.ExportOptionsPdf - Provides a list of options to be used in conjunction with the ExportPDF node. Works in Revit 2022 and later., © Revit.ExportToDwg - Given a list of views and/or sheets as well as various related settings, attempts to export them to DWG using the provided settings., © Revit.ExportToPdf - Given a list of sheets, names, directory and export options this node will batch export PDF files. Requires Revit 2022 or higher to work., © Revit.GetDocument - If no input is specified or an invalid one is, returns current document. If a link instance is provided, it returns the linked document. If a document is provided it will pass it through., © Revit.GetDocumentPath - Returns the file path of a Revit document., © Revit.GetDocuments - Returns the documents currently opened in the Revit application. The current document will be in a separate output to the background opened documents., © Revit.GetFileVersions - Given a file path or list of file paths, attempts to return their version as an integer., © Revit.GetUnitTypes - Returns the unit type or forgetypeId of the document's units., © Revit.ImportCAD - Attempts to import CAD files from file paths to nominated views., © Revit.IsWorkshared - Returns if a document is workshared., © Revit.LengthToInternal - Convert values from the project unit type to internal Revit unit type (decimal feet)., © Revit.LengthToProject - Convert values from the internal unit type (decimal feet) to the Revit unit type., © Revit.PrintToPdf - Given a list of views and/or sheets as well as various related settings, attempts to print them to PDF. You will need to select and adjust a suitable print driver in order to supress 'save as' dialogues and other potential interruptions the print driver may cause by default. Our suggestion is PDF24, which provides options to prevent dialogues from appearing., © Revit.Selection - Returns all elements currently selected by the user in the active document when this node ran., © Revit.StartView - Returns the start view of the document if there is one nominated., © Revit.Version - Returns the build information about the active Revit session., © Revit.VolumeToInternal - Convert values from the project unit type to internal Revit unit type (cubic feet)., © Revit.VolumeToProject - Convert values from the internal unit type (cubic feet) to the Revit unit type., © Room.AtPoint - Given a document and points, attempts to return rooms at those points. If a link instance is provided, it will instead try to return rooms inclusive of required link transforms. If a phase is not valid for a linked document and one with the same name cannot be found, the last created phase will be used., © Room.Boundaries - For a room or list of rooms, return all boundary (and internal) curves. The curves will be based on the currently nominated project room boundary settings., © Room.CreateUnplaced - Creates an unplaced room with a given name, number and phase., © Room.GetByNumber - Given a number, attempts to find the room with that number in a specified document., © Room.Level - Returns the level of a room as an element., © Room.NameNumber - Returns the names and numbers of rooms. Typically the name property of a room in the API returns name and number, so this node works around this., © Room.TaggedInView - Returns if the room is tagged in a given view., © Room.TagInView - Creates a room tag in a given view. Inputs will lace longest based on the room count., © ScheduleSheetInstance.ScheduleType - Given a schedule sheet instance, returns the corresponding schedule type., © ScheduleType.DataAsText - Returns the data from a Revit schedule object as strings., © ScheduleType.DataAsValues - Returns the data in a schedule in the form of native values., © ScheduleType.Headers - Given a schedule or list of schedules, return their header fields and actual/formatted names., © ScheduleType.IsKeySchedule - Given an element or list of elements, will return whether that item is a Key schedule., © ScheduleType.IsRevisionSchedule - Gosh these things are annoying when we're isolating schedule types! This lets you detect if an element is a revision schedule on a sheet in the model., © ScheduleType.Keys - Given a list of schedules, will return the key values of each schedule as elements as well as their names if that schedule is a key schedule., © ScheduleType.RenameHeaders - Given a schedule as well as lists of existing/new naming targets, the node will attempt to find a header with that matching name and update its name to the new one., © ScheduleType.ResetHeaders - Given a schedule or list of schedules, reset the names of all of their headers., © ScopeBox.Used - Checks if a scope box is applied to any views, levels or grids in a document., © ScopeBox.Views - For a scope box or list of them, returns all views that are using that scope box., © SharedParameters.Create - Attempts to create new shared parameters in the active shared parameters file using CreationOptions and a group name., © SharedParameters.CreationOptions - Establishes creation options for a new shared parameter., © SharedParameters.Flat - Returns all shared parameters as definition and name, as well as their corresponding group and name., © SharedParameters.Grouped - Returns the currently available shared parameters, their groups and the external definitions for both., © SharedParameters.Path - Returns the path to the currently active shared parameters file., © SharedParameters.Repath - Given a filepath, will attempt to change the path that the Revit session is drawing its shared parameter file from., © Sheet.Create - Creates Revit sheets based on a list of names, numbers and a single Titleblock type., © Sheet.GetByNumber - Given a sheet number, return the matching sheet. If no match is found, a message is returned. The node also returns a matches list and a list of indices for non-matches., © Sheet.GetRevisionNumbers - For a list of sheets and revisions, returns the numbers of those revisions on the sheets., © Sheet.IsPlaceholder - Given a list of sheets, returns a boolean as to whether they are placeholders., © Sheet.NameFormatted - Given a list of sheets, apply a typical naming convention to them with some optional fields such as prefix and separator., © Sheet.Revisions - Given a sheet, returns all revisions associated with that sheet as elements., © Sheet.RevisionsAdd - Given a list of sheets, attempt to add the given revisions to each of those sheets., © Sheet.RevisionsRemove - Given a list of sheets, attempt to remove given revisions from those sheets., © Sheet.Titleblock - Given a sheet or list of sheets, return any titleblocks on that sheet as well as whether the sheet has titleblocks as a boolean., © Space.AtPoint - Given a document and points, attempts to return spaces at those points. If a link instance is provided, it will instead try to return spaces inclusive of required link transforms. If a phase is not valid for a linked document and one with the same name cannot be found, the last created phase will be used., © Space.GetSpaceType - Gets a Space's Type as well as it's name and Id., © SpaceType.Create - Given a list of names, attempt to create new Space Types. If the name exists already, the Type will be skipped., © Stair.AddPath - Given a list of stairs, a path type and a view, the node attempts to place a path on each of those stairs in that view. Stairs can only have 1 path placed per view, so will return an error if any already have one applied., © String.Alphabet - Generates an upper or lower case alphabet., © String.CaseSplit - Splits one or multiple strings into sublists, broken down at each upper case character., © String.CipherFrom - Converts numbers (or numbers as strings) from 'CipherTo' or from an alternative means back to lower case strings, including spaces., © String.CipherTo - Encodes strings to a numerical format for encoding or processing their values as numbers. The node can handle upper/lower case and also converts spaces to 0/00. You can proceed with numbers or strings, but numbers will not support padding to 2 digits for later processing back to strings., © String.Explode - Deconstructs a string (or list of strings) into their characters. There is the option to replace spaces with a special character which can be helpful for delimiting or visual ergonomics., © String.FromMatrix - Joins a matrix of strings into a single string., © String.FromObject - Uses the python str() function to convert data types to strings. Unlike 'string from object' this will trim trailing 0's from numbers., © String.Join - Joins a list of strings together, inserting a separating character between each of them. Input must be a list containing a list or lists., © String.Occurences - Given a list of strings, returns the number of times each string appears in that list., © String.Regex - Based on a single regex statement, check all strings against it., © String.RevitLegal - Finds all illegal characters for a Revit named element and substitutes them with a character., © String.Rounded - Given a list of numbers with decimal places, round them to a specific length and convert that to a string. More reliable than String.ToObject., © String.ToGuid - Attempts to create a System.Guid from a string. Guid's must be 32 characters long and include 4 dashes., © String.ToMatrix - Converts a single string into a delimited matrix., © String.ToNumber - Attempts to convert a string to a  number, with an optional failure replacement., © String.WindowsLegal - Finds all illegal characters for a windows named element and substitutes them with a replacement., © Surface.ClampZ - Given a lower and upper parameter between -1 and 1, return all surfaces with a normal Z value in that range., © Surface.Populate - Distributes a certain number of points randomly across an input surface., © System.Desktop - This node returns the active username, as well as a path to the user's Desktop., © System.MyDocuments - This node returns the active username, as well as a path to the user's My Documents., © System.Printers - Returns all print driver names installed on the machine., © System.TempFiles - This node returns the active username, as well as a path to the user's Temp files., © System.UserFolder - This node return's the active username, as well as a path to their user folder., © System.UserNames - This node returns the users Windows and Revit user names., © System.UserPaths - This node returns the active username, as well as common user paths including:\r\n- Desktop\r\n- My Documents\r\n- Temp\r\n- Dynamo Revit (for active build)\r\n- Dynamo Revit logs (\" \"), © Timer.Check - Will output a time taken once data has passed through this node, as well as the duration since a given datetime occured. Connect this up to a TimerStart or other TimerCheck nodes to measure the runtime of your scripts!, © Timer.Delay - Given a duration in seconds and some data, this script will delay that data by the given time. A threshold of 3 seconds is used by default to stop an undesirable number being provided., © Timer.Start - Will output a time that is taken once data has passed through this node. Connect this time up to TimerCheck nodes to measure execution times., © UI.LogoPath - Returns the file path of your 'My Documents' folder, then the file 'logo.png'. If you store your logo here you can call on it reliably for Data Shapes interfaces., © UI.Messenger - Displays a message box with a title/body and OK/cancel button. If OK is selected, the third input's data will be passed through., © UI.ChooseFilePath - When runMe is set to true, this node will display a file path dialogue for the user to interact with. The script will remain paused until the input is provided a value., © Vector.Deconstruct - Breaks a vector into its X, Y and Z components., © Vector.FromString - Given a string form of a vector (X = x.xxx, Y = x.xxx, Z = x.xxx), return the equivalent vector. Note that if the original vector was more precise than 3 significant figures, it will be now only accurate to this many., © Vector.GroupByDirection - Given a list of vectors (and a list of data), return the data and vectors grouped by their direction., © Vector.GroupParallel - Given a list of vectors (and a list of data) return the data and vectors grouped by their parallelism., © View.Ancestry - Returns the parent of a view, and the parent of that view, and the.... etc. Will also return if it had any parents, as well as the depth of the view's family tree., © View.ApplyTemplateByName - Given a list of views and a view template name, attempts to find and apply that template. Unlike Dynamo nodes, this process also works with 3D view templates as it runs within Python entirely., © View.CreateDependents - Given a list of names and a view, will generate a set of dependent views upon that view with those names., © View.CreateElevationBodies - Given a list of points and an elevation view type, will create elevation bodies (without markers) at those points., © View.CreateElevationViews - Given elevation bodies and a list or list of lists of indices between 0 and 3, will activate those markers on that body., © View.CreatePlans - Given an even list of levels and names and a view type, this node will create new plan views for those levels and attempt to rename them if a name is available. You can automate the application of view templates by assigning them to the view types in Revit as well. If you feed in a ceiling plan type, it will make a ceiling plan due to how the ViewPlan API works., © View.Dependents - For a view, returns any dependent views it has as well as whether it has any., © ViewFamilyType.GetByNameElevation - Tries to return an elevation type with the given name, if one exists in the model., © ViewFamilyType.GetByViewType - Returns all view family types of a provided view type or view type name (of the ViewType enumeration)., © ViewFamilyType.GetByViewTypeAndName - Returns the view family type of a provided view type or view type name (of the ViewType enumeration), and name if found., © ViewFamilyType.GetByNameFloorPlan - Tries to return an floor plan type with the given name, if one exists in the model., © ViewFamilyType.GetByName3D - Tries to return an 3D view type with the given name, if one exists in the model., © View.GetCropBox - Returns the curves of a view's cropbox (even if not visible/active). Also returns whether the cropbox is currently visible and active as booleans., © View.Level - Returns the associated level of a view (if it has one), as well as a boolean mask to remove views without levels after., © View.Open - Opens a Revit view (can also be a sheet)., © View.OverrideCrop - Overrides the crop boundary of provided views to a given thickness. Note that this only works for elevation views due to Revit limitations., © View.Parent - For a view, return it's next related parent view if any. Will only retrieve one level above (even if it's parent has a parent etc.)., © View.Phase - Given a view or list of views, returns the phases applied to those views as elements., © Viewport.Create - Moves views to sheets based on viewport centres. If less points than views/sheets are provided, it will use longest lacing., © Viewport.GetCentrePoint - Given a viewport or list of viewports, returns their box centrepoint. The node will temporarily hide elements in the viewport view to get the true centrepoint., © Viewport.Relatives - For a viewport, returns the related view and sheet., © View.Primary - For a dependent view, return it's primary view, as well as if it has one., © View.RemoveViewTemplate - Removes any view templates assigned to the provided views., © View.SectionBox - Returns the section box of any view as a bounding box in Dynamo. Does not support section boxes with rotations applied to them (will return the original section box before rotation), and will actually return a bounding box even if a view doesn't have one applied. Use with care!, © View.SetCropBox - Given a view and one polycurve, sets the boundary of that views crop to the curves of that polycurve. Will not accept multiple polycurves or a list of curves., © View.SetPhase - Given a list of views and a single phase, will set the views phases if possible., © View.Sheet - Returns the first sheet a view is found on, if any., © ViewSheetSet.Create - Given a list of views and/or sheets, will create a sheet set for them with the given name. If the set exists by name, it will be recreated., © ViewSheetSet.Views - Return all views and sheets in the view sheet set(s)., © Wall.CurtainGridCount - Returns the horizontal and vertical grid counts for curtain walls. Note that sometimes the parameter does not match the model for spacing based rules!, © Warning.Message - Given a warning element in Revit db format, will return the message associated with that warning in a generic string format., © Warning.RelatedElements - Returns the element(s) associated with the provided warning., © Web.LMGTFY - ChatGPT for dummies., © Web.UrlOpen - Given a URL, will attempt to open in the default web browser used by Windows., © Workset.Create - Attempts to create worksets given a provided name. Will return whether it was successful in each case, as well as the new workset's Id where it was (and a null where it wasn't)., © Workset.IsolateInView - Given a list of views and a list of worksets or workset names, attempts to isolate them all in those views., © Workset.Rename - Will attempt to rename a workset to a newly provided name. If the workset cannot be renamed, a null value will be returned as well as a success report.","engine_version":"2.16.2.5624","engine":"dynamo","engine_metadata":"","site_url":"www.youtube.com/aussiebimguru","repository_url":"https://github.com/aussieBIMguru/Crumple","contains_binaries":true,"node_libraries":["Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"],"copyright_holder":"Gavin Crump","copyright_year":"2025"}